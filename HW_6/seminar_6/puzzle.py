# Создайте модуль с функцией внутри.
# Функция получает на вход загадку, список с возможными
# вариантами отгадок и количество попыток на угадывание.
# Программа возвращает номер попытки, с которой была
# отгадана загадка или ноль, если попытки исчерпаны.



_dict_quiz = {}

def riddle(question: str, answers: list, tries: int = 3) -> int:
    print(f"Отгадай загадку: {question}")
    for i in range(1, tries + 1):
        ans = input(f"Попытка {i}: ")
        if ans in answers:
            return i

    return 0

def quiz():
    questions = {"Зимой и летом одним цветом": ["ель", "ёлка", "сосна", "елка"],
                 "Сидит дед во 100 шуб одет": ["лук", "луковица"],
                 "Не лает, не кусает, в дом не пускает": ["замок", "домофон", "сторож"]
                 }
    for key, value in questions.items():
        result = riddle(key, value)
        save(key, result)
        print(f"Угадал с {result} попытки" if result > 0 else "Не угадал!")



def save(text: str, count: int):
    """Добавьте в модуль с загадками функцию, которая принимает на вход строку (текст загадки) и число
    (номер попытки, с которой она угадана).
    Функция формирует словарь с информацией о результатах отгадывания.
    Для хранения используйте защищённый словарь уровня модуля.
    Отдельно напишите функцию, которая выводит результаты угадывания из защищённого словаря в
    удобном для чтения виде.
    Для формирования результатов используйте генераторное выражение."""
    _dict_quiz[text] = count

def show_results():
    res = (f"Загадку '{key}' разгадали с {value} попытки" if value > 0
           else f"Загадку '{key}' не разгадали"
           for key, value in _dict_quiz.items())
    print("\n".join(res))



__all__ = ["quiz", "show_results"]



if __name__ == "__main__":
    quiz()
    show_results()






